// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum BetStatus {
  PENDING
  ACTIVE
  COMPLETED
  DISPUTED
  CANCELLED
}

enum Outcome {
  WIN
  LOSE
  PENDING
}

model User {
  id              String           @id @default(uuid())
  firstName       String
  lastName        String
  userName        String?
  email           String           @unique
  walletAddress   String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBets     Bet[]            @relation("CreatedBets")
  betParticipants BetParticipant[]
  transactions    Transaction[]
  betApprovals    BetApproval[]    @relation("ApprovedByUser")
}

model Bet {
  id               String           @id @default(uuid())
  creator          User             @relation("CreatedBets", fields: [creatorId], references: [id])
  creatorId        String
  betName          String
  description      String
  totalAmount      Decimal          @db.Decimal(20, 8)
  minimumBetAmount Decimal          @db.Decimal(20, 8)
  status           BetStatus        @default(PENDING)
  source           String?
  betDeadline      String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime?        @updatedAt
  participants     BetParticipant[]
  approvals        BetApproval[]
  transactions     Transaction[]    @relation("BetTransactions")
}

model BetParticipant {
  id                   String        @id @default(uuid())
  user                 User          @relation(fields: [userId], references: [id])
  userId               String
  bet                  Bet           @relation(fields: [betId], references: [id])
  betId                String
  amount               Decimal       @db.Decimal(20, 8)
  outcome              Outcome       @default(PENDING)
  approved             Boolean       @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  squadMultisigAddress String
  approvals            BetApproval[] @relation("ParticipantApprovals")
}

model BetApproval {
  id            String          @id @default(uuid())
  bet           Bet             @relation(fields: [betId], references: [id])
  betId         String
  participant   BetParticipant? @relation("ParticipantApprovals", fields: [participantId], references: [id])
  participantId String?
  approvedBy    User            @relation("ApprovedByUser", fields: [approvedById], references: [id])
  approvedById  String
  approved      Boolean         @default(false)
  createdAt     DateTime        @default(now())
}

model Transaction {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  bet             Bet      @relation("BetTransactions", fields: [betId], references: [id])
  betId           String
  amount          Decimal  @db.Decimal(20, 8)
  transactionHash String
  createdAt       DateTime @default(now())
}
