// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["nativeDistinct"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Bet {
  id                          String    @id @default(uuid())
  createdAt                   DateTime  @default(now())
  condition                   String
  currency                    String
  title                       String
  description                 String?
  betCondition                String
  category                    String?
  creatorId                   String
  winner                      String?
  loser                       String?
  betAnswer                   Boolean?
  betVisibilty                String
  isBetAvialable              Boolean
  betDeadline                 String
  opponentStakeAmount         Float?
  creatorStakeAmount          Float
  creatorAllow3partyApproval  Boolean?
  opponentAllow3partyApproval Boolean?
  betApproverMail             String?
  isBetApprove                Boolean
  creatorAnswer               String
  opponentAnswer              String?
  opponentId                  String?
  creatorName                 String
  opponentName                String?
  marketPublicKey             String    @unique
  status                      BetStatus @default(OPEN)
  liquidity                   Float     @default(0)
  winningOutcome              Int?
  historys                    History[]
  orders                      Order[]
}

model Order {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  betId          String
  userId         String
  amount         Float
  outcome        Int
  orderPublicKey String      @unique
  status         OrderStatus
  bet            Bet         @relation(fields: [betId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
}

model OddsBet {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  condition      String
  creatorId      String
  title          String
  description    String?
  isBetAvialable Boolean
  betCondition   String
  category       String?
  betDeadline    String
  forOdd         Float
  againstOdd     Float
}

model OddBetStack {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  amount    Float
  answer    String
  userId    String
  currency  String
  user      User     @relation(fields: [userId], references: [id])
}

model History {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  betId         String
  winnerId      String
  loserId       String
  betApprovalId String?
  title         String
  bets          Bet      @relation(fields: [betId], references: [id])
}

model User {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  email       String        @unique
  firstName   String
  lastName    String
  updateAt    DateTime?     @default(now())
  userAddress String
  userName    String
  userBet     OddBetStack[]
  orders      Order[]
}

enum BetStatus {
  OPEN
  LOCKED
  SETTLED
  VOIDED
}

enum OrderStatus {
  PLACED
  MATCHED
  SETTLED
  CANCELLED
}